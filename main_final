import random
import sys
import os
from PIL import Image, ImageDraw, ImageFont

input_path = input("Please specify the path of your file: ")
# https://stackoverflow.com/questions/22939211/what-is-the-proper-way-to-take-a-directory-path-as-user-input

assert os.path.exists(input_path), "I did not find the file at " + str(input_path)
file = (input_path, 'r+')
print("File found.\n")

# create font object with the font file and specify
# desired size
size_font = int(height / 4)  # maintains the proportion of text relative to image size
my_font = ImageFont.truetype('HelveticaNeue.ttc', size=size_font, index=1)  # index here indicates the style within
# the TrueType collection file.


def wrap(placard, font=my_font, max_width=width):
    lines = []
    # If the width of the text is smaller than image width
    # we don't need to split it, just add it to the lines array
    # and return
    if font.getsize(placard)[0] <= max_width:
        lines.append(placard)
    else:
        # split the line by spaces to get words
        words = placard.split(' ')
        i = 0
        # append every word to a line while its width is shorter than image width
        while i < len(words):
            line = ''
            while i < len(words) and font.getsize(line + words[i])[0] <= max_width:
                line = line + words[i] + " "
                i += 1
            if not line:
                line = words[i]
                i += 1
            # when the line gets longer than the max width do not append the word,
            # add the line to the lines array
            lines.append(line)
    return lines


def draw_text(placard):

    # initialize the drawing context with
    # the image object as background
    draw = ImageDraw.Draw(img)

    img = Image.open(input_path)
    width, height = img.size  # tuple of image dimensions

    # get shorter lines
    lines = wrap(text, my_font, image_size[0])
    print lines  # ['This could be a single line text ', 'but its too long to fit in one. ']


if __name__ == __main__:
    placard = input("Type your placard.\n"
                    "Choose words or phrases shorter than 10 characters or leave blank: ")
    if placard == "":
        placard = "RESIST"

    draw_text(placard)





# starting position of the message
wt, ht = draw.multiline_textsize(placard, font=my_font)  # measures the total size of the text
(x, y) = ((width - wt) / 2, (height - ht) / 2)  # centers the text on the image

color = 'rgb(255, 255, 255)'  # white color

# draw the message on the background

draw.multiline_text((x, y), placard, fill=color, font=my_font, align="center")

# save the edited image

output_path = input_path.replace('.JPG', '_RESIST.jpg')
img.save(output_path)

# TODO: Replace this with your own filter!
# Median pixel filter, taken from https://note.nkmk.me/en/python-opencv-pillow-image-size
# members = [0] * 9
# for i in range(2, width // 2):
#     for j in range(1, height - 1):
#         members[0] = img.getpixel((i - 1, j - 1))
#         members[1] = img.getpixel((i - 1, j))
#         members[2] = img.getpixel((i - 1, j + 1))
#         members[3] = img.getpixel((i, j - 1))
#         members[4] = img.getpixel((i, j))
#         members[5] = img.getpixel((i, j + 1))
#         members[6] = img.getpixel((i + 1, j - 1))
#         members[7] = img.getpixel((i + 1, j))
#         members[8] = img.getpixel((i + 1, j + 1))
#         new_img.putpixel((i, j), (random.choice(members)))
#
# for i in range(width // 2, width - 1):
#     for j in range(1, height - 1):
#         r, g, b = img.getpixel((i, j))
#         new_img.putpixel((i, j), (0, g, b))
#
# output_path = output("Please specify the path of your file: ")
#
# new_img.save(output_path)
